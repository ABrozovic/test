generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
  // Further reading: 
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CustomUser {
  id              String            @id @default(cuid())
  username        String            @unique
  password        String
  image           String?
  books           Book[]
  comments        Comment[]
  ratings         Rating[]
  buddyReads      BuddyRead[]
  Likes           Like[]
  ReadingProgress ReadingProgress[]
}

model Book {
  id              String            @id @default(cuid())
  title           String
  isActive        Boolean
  buddyReads      BuddyRead[]
  author          String?
  externalLink    String?
  hostedLink      String?
  description     String?           @db.Text
  image           String?
  rating          Rating[]
  comments        Comment[]
  owner           CustomUser        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId         String
  ReadingProgress ReadingProgress[]
}

model ReadingProgress {
  book     Book       @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user     CustomUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookId   String
  userId   String
  progress Int

  @@id([userId, bookId])
}

model Comment {
  id        String     @id @default(cuid())
  user      CustomUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  book      Book       @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId    String
  message   String
  parent    Comment?   @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children  Comment[]  @relation("ParentChild")
  parentId  String?
  likes     Like[]
}

model Like {
  user      CustomUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment    @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String
  commentId String

  @@id([userId, commentId])
}

model Rating {
  user   CustomUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  book   Book       @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId String
  rating Int

  @@id([userId, bookId])
}

model BuddyRead {
  id                         String                    @id @default(uuid())
  bookId                     String
  startDate                  DateTime                  @default(now())
  endDate                    DateTime                  @default(dbgenerated("NOW() + interval '30 day'"))
  user                       CustomUser[]
  book                       Book                      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  ReadingSessionCollection   ReadingSessionCollection? @relation(fields: [readingSessionCollectionId], references: [id], onDelete: Cascade)
  readingSessionCollectionId String

  @@map("ReadingSession")
}

model ReadingSessionCollection {
  id         String      @id @default(cuid())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  BuddyReads BuddyRead[]
}
